#### Passing options to `clap`
###### _version: `0.0.2`_

###### [Index](index.mdown)
----

#### Basic

`clap` supports short (one character) and long (two and more characters) options. 
Short ones are preceded with one hyphen and long with two.

    foo -v
    foo --verbose

Short options passed together (for example `ls -lh`) are supported in `clap`. 
It will internally split them because parser is by design not able to understand connected options 
(to keep it simple).

    foo -bar
    
would become

    foo -b -a -r


Long and short options can be mixed.
    

----

#### Options with arguments

When option requires argument it has to be divided from it by a single space. 
Connecting argument to option with equation mark (`=`) is not supported.

    foo --output file.log --bar
    
    #   this will terminate parsing
    foo --output=file.log --bar

&nbsp;

Only one option that needs argument can be passed as connected and it **has to be the last** in group. 
Otherwise it will treat the next option as its argument which under some circumstances can lead to error.

    #   -o  -- output file
    #   -v  -- be verbose
    
    #   (1) this is right
    foo -vo file.log
    
    #   (2) this can lead to error
    foo -ov file.log


The first example will become `foo -v -o file.log` which is what we want but 
second one will become `foo -o -v file.log` and `clap` will treat `-v` as an argument to 
`-o` instead of treating it as an independent option.


----


#### Separating arguments from options

When you need to pass to your program something which looks like an option and 
can cause error you can explicitly tell parser to stop detecting options by inserting `--` string between 
options and arguments.

    foo --output result.txt -- -2 + 3


----

SEE ALSO:  
&nbsp;
