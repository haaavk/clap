#### Parser
###### _version: `0.2.1`_

###### [Index](index.mdown)
----

Parser is written in a way that makes it easy to write your own interface 
around it and use `clap` parser just as a backend. 

----


#### How input is treated

By design - to keep code simpler - parser do not understand more complex ways of passing options like 
passing several short options after one hyphen, long options connected with their values with equal sign. 

Support for these ideas is done through `clap.formater.Formater()` which is a class that is an additional layer 
between the actual input and `clap.parser.Parser()`. It will format the command line input and process it to be understandable 
by `Parser()`. 

In the process the original input will be altered to contain only options as if they had been passed one at a time. 
So the command `ls -lhR` after altering becomes `ls -l -h -R`. The order of options is preserved. 

**WARNING:** long options cannot be passed together. This will raise `UnrecognizedOptionError`.

----


#### Options with arguments

Options with arguments are supported in `clap`. 
To use this feature you must specify type of argument which the option expects. 
Type is a callback function.

    ...
    parser = clap.parser.Parser(list(formater))
    parser.add(short='o', long='output', type=str)

During parsing the argument will be grabbed and `Parser()` will try to convert it 
to desired type.

If you want 

On the command line the argument must be separated from its option by a single space. 
Assigning arguments with equation mark is not supported in `clap`. 

----


#### When parsing of options ends

Parser ends analyzing input in search of options after it finds anything that doesn't look like an option. 
Every piece of input after this *something* is considered argument. 
Another circumstance under parser finishes it's job is when it finds `--` string 
which means "*stop analyzing here - everything after this sign is an argument no matter if it looks like an options or not*". 

Arguments for options which require them are not stopping parser. 

----


#### UnexpectedOptionError

This error is raised when parser finds option which has no description which means it is not recognized.

----

SEE ALSO:  
&nbsp;
