#### Parser
###### _version: `0.0.2`_

###### [Index](index.mdown)
----

Parser in `clap` is accessible through interface layer but can be used on its own. 
It may be slightly more difficult and you need to remeber that parser lacks some end-user-wanted methods. 

But it is written in a way that makes it easy to write your own interface 
which will be using `clap` parser just as a backend. 

----


#### How input is treated

By design - to keep code simpler - parser do not understand options which are passed together (after one hyphen). 

Support for more abstract ideas is done through `Formatter()` which is a class that is an additional layer 
between the actual input and `Parser()`. It will format the command line input and process it to be understandable 
by `Parser()`. 

Every new feature is first implemented in `Formatter()` and can (but does not have to) be later moved to `Parser()`.

In the process the original input will be altered to contain only options as if they had been passed one at a time. 
So the command `ls -lhR` after altering becomes `ls -l -h -R`. The order of options is preserved. 

**WARNING:** long options cannot be passed together. This will raise `UnexpectedOptionError`.

----


#### Options with arguments

Some options require arguments. The common example is option `-o` or `--output`. 
It is obvious that it needs file to which it can write. 

Options with arguments are supported in `clap`. 
To use tell parser that it will need to find argument for this option use colon (`:`) for short and 
equation mark (`=`) for long options when giving descriptions to parser. 

On the command line the argument must be separated from its option by a single space. 
Assigning arguments with equation mark is not supported in `clap`. 

----


#### When parsing of options ends

Parser ends analyzing input in search of options after it finds anything that doesn't look like an option. 
Every piece of input after this *something* is considered argument. 
Another circumstance under parser finishes it's job is when it finds `--` string 
which means "*stop analyzing here - everything after this sign is an argument no matter if it looks like an options or not*". 

Arguments for options which require them are not stopping parser. 

----


#### UnexpectedOptionError

This error is raised when parser finds option which has no description which means it is not recognized.

----

SEE ALSO:  
&nbsp;
