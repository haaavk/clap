#### Definitions

Some definitions may be confusing at first so here are explanations to some concepts used in 
CLAP.


----

*required option*

This is option required by the program to run. User MUST pass it. 


----

*option* ***required*** *by other option*

It's set via `requires` parameter. Every option present on this list must be present in `argv`.

Option that is not required by a program directly but is required when some other option is 
passed. Imagine that you have a program which inserts key/value pairs into some file. Let's 
run it:

    our-program

It did nothing. But when we pass it only a key option...

    our-program --key foo
    fatal: option --key requires option --value to be passed

... it returns an error. User MUST pass both key and value.

    our-program --key foo --value bar


----

*option* ***needed*** *by other option*

It's set via `needs` parameter. **At least one** option present on this list must be present in `argv`. 
Non-greedy version of `requires`.

Imagine that `--which` option needs `--this` or `--that` option to be present but not neccessarily both. 


----

*conflicting options*

Options that must not come together. This may be because it would break the program, for convinience, because the logic 
for such combination is not yet implemented or becuase author likes it that way.
First example which comes to my mind (I implement this rule in all my programs) is `--verbose` and `--quiet` options. 
What sense is passing them together? Passing `--quiet` and `--debug` together makes more sense because user may want not 
to be distracted by normal output when debugging.
