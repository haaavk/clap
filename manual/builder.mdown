### Building user interfaces in CLAP using JSON

Since version 0.7.2 it is possible to build user interface entirely in JSON and
use CLAP to load it.
Since 0.7.4 every feature that can be used when creating interfaces using Python API is also
available using JSON builder API.


----

#### Argument types

Only thing that needs to be set up in Python are *type-handlers* that are not built-in
Python data types.
These *type-handlers* are the callback functions which are used to convert options' arguments to
their final data types.
In JSON they are stored as strings and need to be replaced by real functions.
The three basic ones: `str`, `int` and `float` are always available.


----

#### Building single-command parser

Single command parser has only options and
it does not really matter if they are global or local.
It can be built like this:

```
{
    "doc": {
        "help": "a help message"
    },
    "options": {
        "local": [
            {
                "short": "f",
                "long": "foo"
            },
            {
                "short": "b",
                "long": "bar"
            }
        ]
    }
}
```

----

#### Building multiple-commands parser

Multi-commands parsers are defined exactly the same way as single-command parsers.
The only difference is the presence of `commands` key, which is a dictionary of
nested commands.  
Commands can be nested to an arbitrary level, CLAP does not enforce any limits.

Example:

```
{
    "doc": {
        "help": "a help message"
    },
    "options": {
        "local": [
            {
                "short": "f",
                "long": "foo"
            }
        ],
        "global": [
            {
                "short": "b",
                "long": "bar"
            }
        ]
    },
    "commands": {
        "cmnd": {
            "doc": {
                "help": "it is nested"
            },
            "options": {"local": []}
        }
    }
}
```


