#!/usr/bin/env python3

"""command line arguments parser"""

__version__ = "0.0.1"
__vertuple__ = tuple( int(i) for i in __version__.split(".") )

class UnexpectedOptionError(Exception): pass
class SwitchValueNotFoundError(Exception): pass
class NotParsedError(Exception): pass
class OptionNotFoundError(LookupError): pass

class Parser():
    def __init__(self, short="", long=[], argv=[]):
        self.setshort(short)
        self.setlong(long)
        self.setargv(argv)
        self.opts = []
        self.args = []
        self.parsed = False
    
    def setshort(self, opts):
        """
        Sets short options. Accepts string.
        """
        self.descript_short = opts
        self._splitshorts()

    def _splitshorts(self):
        """
        This method extracts short options identifiers from string passed to Parser.
        """
        descript = []
        for i, opt in enumerate(self.descript_short):
            try:
                if self.descript_short[i+1] == ":": opt += ":"
            except IndexError: pass
            finally: descript.append("-{0}".format(opt))
        while "-:" in descript: descript.remove("-:")
        self.descript_short = descript

    def setlong(self, opts):
        """
        Sets long options. Accepts list of strings.
        """
        self.descript_long = opts

    def setargv(self, argv):
        """
        Sets list of arguments from command line or custom made (eg. generated by a client program).
        """
        self.argv = argv

    def getshorts(self):
        """
        Returns list of short options accepted by this instance of Parser().
        """
        return self.descript_short
    
    def getlongs(self):
        """
        Returns list of long options accepted by this instance of Parser().
        """
        return [ "--{0}".format(opt) for opt in self.descript_long ]
    
    def isopt(self, opt):
        """
        Checks if given string is a valid option for this instance of Parser(). 
        You have to pass it in full form eg. `--verbose` and `-v`. 
        Value indicator (`:`) has to be explicitly given.
        """
        return opt in self.descript_short or opt[2:] in self.descript_long


    def _parseopts(self):
        """
        Parses options from the command line and assigns values to them if needed.
        """
        opts = []
        i = 0
        while i < len(self.argv):
            opt = self.argv[i]
            if self.isopt(opt):
                value = ""
            elif self.isopt("{0}:".format(opt)):
                i += 1
                if self.isopt(self.argv[i]): raise SwitchValueNotFoundError("'{0}' option requires a value but found an option at index {1}".format(opt, i))
                value = self.argv[i]
            elif opt == "--":
                i += 1
                break
            elif opt[0] == "-":
                raise UnexpectedOptionError("unexpected option found: '{0}'".format(opt))
            else:
                break
            opts.append( (opt, value) )
            i += 1
        self.opts = opts
        return i
    
    def parse(self):
        """
        Parses contents of `argv` and splits them into options and arguments.
        """
        #   _parseopts() returns index at which it stopped parsing options 
        #   this means that after this index there are only arguments
        n = self._parseopts()
        self.args = self.argv[n:]
        self.parsed = True
    
    def getopt(self, opt):
        """
        Returns options value or empty string if the option does not accept values.
        Raises OptionNotFoundError if option has not been found.
        """
        value = None
        for optkey, optvalue in self.opts:
            if optkey == opt:
                value = optvalue
                break
        if value == None: raise OptionNotFoundError("'{0}' not found in passed options".format(opt))
        return value

    def waspassed(self, opt):
        """
        Checks if the given option was passed.
        Returns boolean value.
        """
        return opt in self.listpassed()
        
    def listpassed(self):
        """
        Returns list of options passed to this instance of Parser().
        """
        if not self.parsed: raise NotParsedError("listpassed() used on object with unparsed options")
        opts = []
        opts = [ opt for opt, value in self.opts ]
        return opts

    def listaccepted(self):
        """
        Returns list of options by this instance of Parser().
        """
        opts = []
        for opt in self.descript_short: opts.append(opt)
        for opt in self.descript_long: opts.append( "--{0}".format(opt) )
        while "--" in opts: opts.remove("--")
        return opts

    def getargs(self):
        """
        Returns list of arguments passed from command line.
        """
        return self.args
