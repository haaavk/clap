
Help on module errors:

NAME
    errors

CLASSES
    builtins.Exception(builtins.BaseException)
        ConflictingOptionsError
        InvalidArgumentTypeError
        MissingArgumentError
        NeededOptionNotFoundError
        RequiredOptionNotFoundError
        UnrecognizedModeError
        UnrecognizedOptionError
    
    class ConflictingOptionsError(builtins.Exception)
     |  Raised when two or more conflicting options are found together.
     |  
     |  Method resolution order:
     |      ConflictingOptionsError
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from builtins.Exception:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __reduce__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __setstate__(...)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args
    
    class InvalidArgumentTypeError(builtins.Exception)
     |  Method resolution order:
     |      InvalidArgumentTypeError
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from builtins.Exception:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __reduce__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __setstate__(...)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args
    
    class MissingArgumentError(builtins.Exception)
     |  Raised when option requires an argument but it is not found.
     |  
     |  Method resolution order:
     |      MissingArgumentError
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from builtins.Exception:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __reduce__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __setstate__(...)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args
    
    class NeededOptionNotFoundError(builtins.Exception)
     |  Raised when even one of needed options is not found.
     |  
     |  Method resolution order:
     |      NeededOptionNotFoundError
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from builtins.Exception:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __reduce__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __setstate__(...)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args
    
    class RequiredOptionNotFoundError(builtins.Exception)
     |  Raised when required option is not found in input list.
     |  
     |  Method resolution order:
     |      RequiredOptionNotFoundError
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from builtins.Exception:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __reduce__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __setstate__(...)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args
    
    class UnrecognizedModeError(builtins.Exception)
     |  Raised when unrecognized mode is found in input list.
     |  
     |  Method resolution order:
     |      UnrecognizedModeError
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from builtins.Exception:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __reduce__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __setstate__(...)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args
    
    class UnrecognizedOptionError(builtins.Exception)
     |  Raised when unrecognized option is found in input list.
     |  
     |  Method resolution order:
     |      UnrecognizedOptionError
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from builtins.Exception:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __reduce__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __setstate__(...)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args

FILE
    /home/marekjm/Development/clap/clap/errors.py


Help on module formater:

NAME
    formater

CLASSES
    builtins.object
        Formater
    
    class Formater(builtins.object)
     |  This object is used to format the input list in order for use
     |  with Parser().
     |  
     |  Methods defined here:
     |  
     |  __init__(self, argv)
     |  
     |  __iter__(self)
     |  
     |  __list__(self)
     |  
     |  format(self)
     |      This will format the input list.
     |  
     |  reset(self)
     |      Resets `formatted` back to `argv`.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)

FUNCTIONS
    lookslikeopt(s)
        Returns True if given string looks like option.

DATA
    connected_shorts_regexp = <_sre.SRE_Pattern object>
    longopt_regexp = <_sre.SRE_Pattern object>
    longopt_with_equal_sign_regexp = <_sre.SRE_Pattern object>
    shortopt_regexp = <_sre.SRE_Pattern object>

FILE
    /home/marekjm/Development/clap/clap/formater.py


Help on module __init__:

NAME
    __init__

VERSION
    0.6.3

FILE
    /home/marekjm/Development/clap/clap/__init__.py


Help on module modes:

NAME
    modes

CLASSES
    builtins.object
        Parser
    
    class Parser(builtins.object)
     |  Object implementing modes functionality.
     |  
     |  Methods defined here:
     |  
     |  __contains__(self, option)
     |      If you check whether Parser() contains an option or not, general one and every mode-parser
     |      is checked.
     |  
     |  __init__(self, argv, default='')
     |  
     |  __str__(self)
     |  
     |  addMode(self, name, parser)
     |      Adds mode to Modes() or overwrites old definition.
     |  
     |  addOption(self, short='', long='', argument=None, requires=[], needs=[], required=False, not_with=[], conflicts=[], hint='')
     |      Adds an option to the list of options recognized by parser.
     |      Available types are: int, float and str.
     |      
     |      If you `addOption` it is added to the general parser and all mode-parsers.
     |  
     |  check(self)
     |      Checks input list for errors.
     |  
     |  define(self)
     |      Defines mode to use and sets correct parser.
     |  
     |  feed(self, argv)
     |      Feeds input arguments list to parser.
     |  
     |  get(self, s)
     |      Returns option's argument.
     |  
     |  has(self, mode)
     |      Returns True if Modes() has given mode.
     |  
     |  parse(self)
     |      Parses input list.
     |  
     |  type(self, s)
     |      Returns type of the option.
     |      If mode is defined use self.parser. 
     |      If not, interate over all modes and return first non-None
     |      type found.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  arguments

FILE
    /home/marekjm/Development/clap/clap/modes.py


Help on module option:

NAME
    option - This module contains Option() object.

CLASSES
    builtins.object
        Option
    
    class Option(builtins.object)
     |  Object representing an option.
     |  
     |  CLAP aims at being one of the most advanced libraries for parsing command line options for
     |  Python 3 language. To achieve this, each option has plenty of parameters which allows great
     |  customization of the behaviour of interfaces created with CLAP.
     |  
     |  Having lenghty list of parameters has its downsides of which one is that their functions are
     |  hard to remember. So, here is the explanation of what they do:
     |  
     |  short:
     |      This is short name for the option
     |  
     |  long:
     |      This is long name for the option
     |  
     |  argument:
     |      You can pass one of these: str, int or float. If you do so, CLAP will expect an argument of given
     |      type to be passed alongside the option.
     |      CLAP will raise an exception when:
     |      * option is given no argument,
     |      * option is given argument of invalid type (argument is converted from string during parsing).
     |      In fact, `argument` should just be a one-parameter callback taking string.
     |  
     |  requires:
     |      List of options that MUST be passed with this option. An excpetion is raised when EVEN ONE OF THEM
     |      is NOT found in `argv`.
     |  
     |  needs:
     |      Slightly different from `requires`.
     |      It's list of options which MAY be passed with this option. An exception is raised when NONE OF THEM
     |      is found in `argv`.
     |  
     |  required:
     |      Boolean. If `True` an exception is raised if option is not found in `argv`.
     |  
     |  not_with:
     |      List of options the option is not required with. If EVEN ONE OF THEM is found an evception is not
     |      raised even if the option itself is not found.
     |  
     |  conflicts:
     |      List of options this option CANNOT BE passed with. If EVEN ONE OF THEM is found in `argv` an exception
     |      is raised.
     |  
     |  hint:
     |      It's self-explanatory, isn't it? Text explaining usage of the option.
     |      **Warning:** may be deprecated in near future!
     |  
     |  Methods defined here:
     |  
     |  __getitem__(self, key)
     |  
     |  __init__(self, short='', long='', argument=None, requires=[], needs=[], required=False, not_with=[], conflicts=[], hint='')
     |  
     |  __iter__(self)
     |  
     |  __list__(self)
     |  
     |  __str__(self)
     |  
     |  match(self, s)
     |      Returns True if given string matches one of option names.
     |  
     |  type(self)
     |      Returns type of argument for this option.
     |      None indicates no argument.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __dict__ = mappingproxy({'__str__': <function Option.__str_...: <attri...

FILE
    /home/marekjm/Development/clap/clap/option.py


Help on module parser:

NAME
    parser

CLASSES
    builtins.object
        Parser
    
    class Parser(builtins.object)
     |  Used for parsing options.
     |  
     |  Methods defined here:
     |  
     |  __contains__(self, option)
     |      Returns True if Parser() contains given option as parsed.
     |      Remeber to parse() the input before you will use this feature.
     |  
     |  __init__(self, argv=[])
     |  
     |  accepts(self, option)
     |      Returns True if Parser() accepts this option.
     |  
     |  add(self, short='', long='', argument=None, requires=[], needs=[], required=False, not_with=[], conflicts=[], hint='')
     |      Adds an option to the list of options recognized by parser.
     |      Available types are: int, float and str.
     |      
     |      :param short: short, one character name for the option ( [a-zA-Z] )
     |      :type short: str
     |      :param long: long multiple-character name for option ( [a-zA-Z]+[a-zA-Z0-9]*(-[a-zA-Z0-9]+)* )
     |      :type short: str
     |      :param type: type of argument for the option
     |      :type type: str, int, float
     |      :param required: whether this option is required or not
     |      :type required: bool
     |      :param not_with: list of options with which this option is not required (give only with `required`)
     |      :param not_with: list[str]
     |      :param conflicts: list of options with which this option must not be passed (this can be manipulated by user
     |          using *backdoor-style* option `--CLAP-deep-check on|off`)
     |      :type conflicts: list[str]
     |      :param hint: hint for the option
     |      :type short: str
     |      
     |      :returns: clap.option.Option
     |  
     |  alias(self, option)
     |      Returns alias string for given option.
     |      Returns empty string if no alias exist.
     |  
     |  check(self, deep=True)
     |      Checks if input list is valid for this instance of Parser().
     |      Run before `parse()` to check for errors in input list.
     |  
     |  feed(self, argv)
     |      Feeds input arguments list to parser.
     |      Feeding new data to Parser() resets `parsed` and
     |      `arguments` variables.
     |  
     |  get(self, key)
     |      Returns option value.
     |      Returns None if given option does not need an argument.
     |  
     |  gethint(self, option)
     |      Returns hint for given option.
     |  
     |  parse(self)
     |      Parses input.
     |  
     |  remove(self, short='', long='')
     |      Removes option from the list.
     |      
     |      :returns: non-negative integer indicates that some option was removed
     |  
     |  type(self, s)
     |      Returns type of given option.
     |      None indicates that option takes no additional argument.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)

FILE
    /home/marekjm/Development/clap/clap/parser.py


no Python documentation found for './clap/__pycache__'

